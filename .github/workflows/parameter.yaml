name: Full Workflow with PR and Notifications
on:
  push:
    branches:
      - master  # Trigger this workflow when pushing to the master branch

# name: Full Workflow with PR and Notifications
# on:
#   workflow_run:
#     workflows: ["deploy_into_EKS_cluster_dashboard_api_beacon_flow"]  # Your CD workflow name
#     types:
#       - completed
#     branches:
#       - master

jobs:
  full-workflow:
    runs-on: ubuntu-latest
    # Only run if the CD workflow was successful
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  
        with:
          fetch-depth: 0  # Fetch full history for proper branching 
          
      - name: Set Git user identity
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
      - name: Check if PR is needed
        id: check_diff
        run: |
          git fetch origin develop
          git fetch origin master
          
          # Check if there are differences between master and develop
          if git diff --quiet origin/master origin/develop; then
            echo "No differences between master and develop branches"
            echo "needs_pr=false" >> $GITHUB_ENV
          else
            echo "Differences found between master and develop branches"  
            echo "needs_pr=true" >> $GITHUB_ENV
            
            # Show what changes exist
            echo "Changes summary:"
            git log --oneline origin/develop..origin/master
          fi
          
      - name: Slack Notification - No PR needed
        if: env.needs_pr == 'false'
        run: |
          ACTIONS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ACTIONS_ACTOR=${{ github.actor }}
          BRANCH_NAME="master"
          REPO_NAME=${{ github.repository }}
          
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "attachments": [
              {
                "color": "#36a64f",
                "text": ":information_source: No need to merge to develop - branches are already in sync \nREPO_NAME: '"${REPO_NAME}"' \nBranch: '"${BRANCH_NAME}"' \nTriggered by CD success \nReview the details here: <'"${ACTIONS_URL}"'|Click to View>"
              }
            ]
          }' \
          ${{ secrets.RELEASE_SLACK_URL }}
          
      - name: Create intermediate branch from master
        if: env.needs_pr == 'true'
        run: |
          # Generate dynamic branch name based on current date and time
          BRANCH_NAME="intermediate-branch-$(date +'%Y%m%d%H%M%S')"
          echo "Generated branch name: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Create and push the intermediate branch
          git fetch origin develop
          git checkout master
          git pull origin master
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          
      - name: Create Pull Request from intermediate to develop
        id: create_pr
        if: env.needs_pr == 'true'
        run: |
          pr_response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "Automated PR: Sync master to develop via ${{ env.BRANCH_NAME }}",
              "body": "This is an automated pull request to sync changes from master to develop.\n\nSource branch: ${{ env.BRANCH_NAME }} (based on master)\nTarget branch: develop\n\nThis PR contains the latest changes from master that need to be merged into develop.",
              "head": "${{ env.BRANCH_NAME }}",
              "base": "develop"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")
          
          echo "PR Response: $pr_response"
          
          # Extract PR number from response
          pr_number=$(echo "$pr_response" | jq -r '.number')
          
          if [ "$pr_number" != "null" ] && [ -n "$pr_number" ]; then
            echo "Successfully created PR #$pr_number"
            echo "PR_NUMBER=$pr_number" >> $GITHUB_ENV
          else
            echo "Failed to create PR"
            echo "PR_NUMBER=" >> $GITHUB_ENV
            echo "Error: $pr_response"
          fi
          
      - name: Get PR number (backup method)
        id: get_pr_number
        if: env.PR_NUMBER == '' && env.needs_pr == 'true'
        run: |
          echo "Trying backup method to find PR..."
          sleep 3
          
          # Get PR number for intermediate branch -> develop using GitHub CLI
          pr_number=$(gh pr list --head ${{ env.BRANCH_NAME }} --base develop --json number --jq '.[0].number')
          
          if [ "$pr_number" != "null" ] && [ -n "$pr_number" ]; then
            echo "Found PR using backup method: $pr_number"
            echo "PR_NUMBER=$pr_number" >> $GITHUB_ENV
          else
            echo "No PR found with backup method either"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check if PR has conflicts
        id: check_pr_conflicts
        if: env.PR_NUMBER != '' && env.PR_NUMBER != 'null' && env.needs_pr == 'true'
        run: |
          # Wait a moment for GitHub to process the PR
          sleep 5
          
          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}"
          pr_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $pr_url)
          pr_status=$(echo "$pr_data" | jq -r '.mergeable')
          
          echo "PR mergeable status: $pr_status"
          echo "mergeable=$pr_status" >> $GITHUB_ENV
          echo "mergeable=$pr_status" >> $GITHUB_OUTPUT
          
      - name: Slack Notification if PR has conflicts
        if: env.mergeable == 'false' && env.PR_NUMBER != '' && env.PR_NUMBER != 'null' && env.needs_pr == 'true'
        run: |
          ACTIONS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ACTIONS_ACTOR=${{ github.actor }}
          BRANCH_NAME="master"
          REPO_NAME=${{ github.repository }}
          
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "attachments": [
              {
                "color": "#FF8C00",
                "text": ":warning: The automated PR from master to develop has conflicts \nPR #'"${{ env.PR_NUMBER }}"' \nREPO_NAME: '"${REPO_NAME}"' \nBranch: '"${BRANCH_NAME}"' \nTriggered by CD success \nReview the details here: <'"${ACTIONS_URL}"'|Click to View>"
              }
            ]
          }' \
          ${{ secrets.RELEASE_SLACK_URL }}
          
      - name: Merge PR if no conflicts
        if: env.mergeable == 'true' && env.PR_NUMBER != '' && env.PR_NUMBER != 'null' && env.needs_pr == 'true'
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"commit_title": "Merge ${{ env.BRANCH_NAME }} to develop", "merge_method": "merge"}' \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}/merge"
          
      - name: Slack Notification of successful merge
        if: env.mergeable == 'true' && env.PR_NUMBER != '' && env.PR_NUMBER != 'null' && env.needs_pr == 'true'
        run: |
          ACTIONS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ACTIONS_ACTOR=${{ github.actor }}
          BRANCH_NAME="master"
          REPO_NAME=${{ github.repository }}
          
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "attachments": [
              {
                "color": "#36a64f",
                "text": ":white_check_mark: The automated PR from master to develop was successfully merged \nPR #'"${{ env.PR_NUMBER }}"' \nREPO_NAME: '"${REPO_NAME}"' \nBranch: '"${BRANCH_NAME}"' \nTriggered by CD success \nReview the details here: <'"${ACTIONS_URL}"'|Click to View>"
              }
            ]
          }' \
          ${{ secrets.RELEASE_SLACK_URL }}
          
      - name: Cleanup intermediate branch
        if: env.mergeable == 'true' && env.PR_NUMBER != '' && env.PR_NUMBER != 'null' && env.needs_pr == 'true'
        run: |
          git push origin --delete ${{ env.BRANCH_NAME }}
          
      - name: Slack Notification if PR creation failed
        if: (env.PR_NUMBER == '' || env.PR_NUMBER == 'null') && env.needs_pr == 'true'
        run: |
          ACTIONS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          ACTIONS_ACTOR=${{ github.actor }}
          BRANCH_NAME="master"
          REPO_NAME=${{ github.repository }}
          
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "attachments": [
              {
                "color": "#FF0000",
                "text": ":x: Failed to create automated PR from master to develop \nREPO_NAME: '"${REPO_NAME}"' \nBranch: '"${BRANCH_NAME}"' \nTriggered by CD success \nReview the details here: <'"${ACTIONS_URL}"'|Click to View>"
              }
            ]
          }' \
          ${{ secrets.RELEASE_SLACK_URL }}
